{
	"info": {
		"_postman_id": "f06e6bd2-4473-44cf-aaf7-eacc9247c25b",
		"name": "requests-hw1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "req1_get",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Success\", function() {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"//Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Valid_response\" , function(){\r",
							"    pm.expect(pm.response.json()).to.eql([\r",
							"    \"Vadym\",\r",
							"    \"Taranenko\"\r",
							"]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}:5005/get_method?name=Vadym&age=Taranenko",
					"host": [
						"{{url}}"
					],
					"port": "5005",
					"path": [
						"get_method"
					],
					"query": [
						{
							"key": "name",
							"value": "Vadym"
						},
						{
							"key": "age",
							"value": "Taranenko"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "req2_post",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Response and request validation\", function () {\r",
							"    //Спарсить response body в json.\r",
							"    const jsonResponse = pm.response.json();\r",
							"\r",
							"    //Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"    pm.expect(jsonResponse.name).to.eql(\"Vadym\") \r",
							"\r",
							"    //Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"    pm.expect(jsonResponse.age).to.eql('28')\r",
							"\r",
							"    //Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"    pm.expect(jsonResponse.salary).to.eql(4000)\r",
							"\r",
							"    //Спарсить request.\r",
							"    const reqData = new Map()\r",
							"    pm.request.body.toJSON().formdata.forEach( (el) => {\r",
							"        reqData.set(el.key, el.value);\r",
							"        console.log(el.key + \" \" + el.value)\r",
							"    })\r",
							"\r",
							"    console.log(reqData);\r",
							"    \r",
							"    //Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"    pm.expect(jsonResponse.name).to.eql(reqData.get(\"name\"))\r",
							"    \r",
							"    //Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"    pm.expect(jsonResponse.age).to.eql(reqData.get(\"age\"))\r",
							"\r",
							"    //Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"    pm.expect(+jsonResponse.salary).to.eql(+reqData.get(\"salary\"))\r",
							"\r",
							"    //Вывести в консоль параметр family из response.\r",
							"    console.log(JSON.stringify(jsonResponse.family));\r",
							"   \r",
							"    //Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"    pm.expect(reqData.get(\"salary\") * 4).to.eql(jsonResponse.family.u_salary_1_5_year)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Vadym",
							"type": "text"
						},
						{
							"key": "age",
							"value": "28",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "4000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}:5005/user_info_3",
					"host": [
						"{{url}}"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": " ",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "req3_get",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}:5005/object_info_1?name=Vadym&age=29&weight=78",
					"host": [
						"{{url}}"
					],
					"port": "5005",
					"path": [
						"object_info_1"
					],
					"query": [
						{
							"key": "name",
							"value": "Vadym"
						},
						{
							"key": "age",
							"value": "29"
						},
						{
							"key": "weight",
							"value": "78"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "req4_get",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}:5005/object_info_2?name=Vadym&age=28&salary=4000",
					"host": [
						"{{url}}"
					],
					"port": "5005",
					"path": [
						"object_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "Vadym"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "4000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "req5_get",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Success\", function() {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Response and request validation\", function () {\r",
							"    //3. Спарсить response body в json.\r",
							"    const jsonResponse = pm.response.json();\r",
							"\r",
							"    //4. Спарсить request.\r",
							"    const reqData = new Map();\r",
							"    pm.request.url.query.map((el) => {\r",
							"        reqData.set(el.key, el.value);\r",
							"        console.log(el.key + \" \" + el.value)\r",
							"    })\r",
							"\r",
							"    console.log(reqData);\r",
							"\r",
							"    //5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"    pm.expect(jsonResponse.name).to.eql(reqData.get(\"name\"));\r",
							"\r",
							"    //6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"    pm.expect(jsonResponse.age).to.eql(reqData.get(\"age\"));\r",
							"\r",
							"    //7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"    pm.expect(+jsonResponse.salary).to.eql(+reqData.get(\"salary\"));\r",
							"\r",
							"    //8. Вывести в консоль параметр family из response.\r",
							"    console.log(JSON.stringify(jsonResponse.family));\r",
							"\r",
							"    //9. Проверить, что у параметра dog есть параметры name.\r",
							"    pm.expect(jsonResponse.family.pets.dog).haveOwnProperty(\"name\");\r",
							"\r",
							"    //10. Проверить, что у параметра dog есть параметры age.\r",
							"    pm.expect(jsonResponse.family.pets.dog).haveOwnProperty(\"age\");\r",
							"\r",
							"    //11. Проверить, что параметр name имеет значение Luky.\r",
							"    pm.expect(jsonResponse.family.pets.dog.name).to.eql(\"Luky\");\r",
							"\r",
							"    //12. Проверить, что параметр age имеет значение 4.\r",
							"    pm.expect(jsonResponse.family.pets.dog.age).to.eql(4);\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}:5005/object_info_3?name=Vadym&age=28&salary=4000",
					"host": [
						"{{url}}"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Vadym"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "4000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "req6_get",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Success\", function() {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Response and request validation\", function () {\r",
							"    //3. Спарсить response body в json.\r",
							"    const jsonResponse = pm.response.json();\r",
							"\r",
							"    //4. Спарсить request.\r",
							"    const reqData = new Map();\r",
							"    pm.request.url.query.map((el) => {\r",
							"        reqData.set(el.key, el.value);\r",
							"        reqData.set({el});\r",
							"        console.log(el.key + \" \" + el.value)\r",
							"    })\r",
							"    console.log(reqData);\r",
							"\r",
							"    //5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"\r",
							"    //6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"    //7. Вывести в консоль параметр salary из request.\r",
							"    //8. Вывести в консоль параметр salary из response.\r",
							"    //9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"    //10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"    //11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"    //12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"    //13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"    //14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"    //15. Создать в окружении переменную name\r",
							"    //16. Создать в окружении переменную age\r",
							"    //17. Создать в окружении переменную salary\r",
							"    //18. Передать в окружение переменную name\r",
							"    //19. Передать в окружение переменную age\r",
							"    //20. Передать в окружение переменную salary\r",
							"    //21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"})\r",
							"    "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}:5005/object_info_4?name=Vadym&age=28&salary=4000",
					"host": [
						"{{url}}"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Vadym"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "4000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "req7_post",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Vadym",
							"type": "text"
						},
						{
							"key": "age",
							"value": "28",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "4000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}:5005/user_info_2",
					"host": [
						"{{url}}"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "Vadym",
							"disabled": true
						},
						{
							"key": "age",
							"value": "28",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "4000",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "162.55.220.72"
		}
	]
}